{"workflows":[{"id":1,"metadata":{"longname":"AfriAlliance Workflow"},"operations":[{"id":0,"metadata":{"longname":"i3:Moving Average","label":"moving_wps_average","url":"http://130.89.221.193:82/WorkflowApp/app/api/wps.py?","resource":"WPS","description":"The Moving average operation is a point interpolation which requires a point map as input and returns a raster map as output. To the output pixels, weighted averaged point values are assigned.The weight factors for the points are calculated by a user-specified weight function. The weight function ensures that points close to an output pixel obtain larger weights than points which are farther away. Furthermore, the weight functions are implemented in such a way that points which are farther away from an output pixel than a user-defined limiting distance obtain weight zero.When interpolating point values, it is for time efficiency reasons, strongly advised to choose a rather large pixel size for the output map. Further interpolation on the raster map values can be performed using the Densify operation or the Resample operation.","inputparametercount":5,"outputparametercount":1,"position":[392,17]},"inputs":[{"id":0,"identifier":"feature","name":"input featurecoverage","type":"geom","description":"input featurecoverage with any domain","optional":false,"url":"http://130.89.8.26/WorkflowApp/app/api/sos.py?service=SOS&request=GetObservation&version=1.0.0&observedProperty=Rainfall_sensors&offering=rainfall_SENSORS&eventTime=2015-07-01/2015-07-31","value":"http://130.89.8.26/WorkflowApp/app/api/sos.py?service=SOS&request=GetObservation&version=1.0.0&observedProperty=Rainfall_sensors&offering=rainfall_SENSORS&eventTime=2015-07-01/2015-07-31"},{"id":1,"identifier":"weight_function","name":"weight function","type":"string","description":"The method of weight function to be applied. Either Inverse Distance method or Linear distance method","optional":true,"url":"","value":"invDist"},{"id":2,"identifier":"weight_exponent","name":"weight exponent","type":"string","description":"value for weight exponent n to be used in the specified weight function (real value, usually a value close to 1.0).","optional":false,"url":"","value":"1"},{"id":3,"identifier":"limiting_distance","name":"limiting distance","type":"double","description":"value for the limiting distance: points that are farther away from an output pixel than the limiting distance obtain weight zero","optional":false,"url":"","value":"1"},{"id":4,"identifier":"georef","name":"georeference","type":"georeference","description":"the parameter can either be a georeference or the x extent of the the to be created raster","optional":false,"url":"","value":"afrialiance.grf"}],"outputs":[{"id":0,"identifier":"result","name":"result","value":"","description":"result","type":"string"}]},{"id":1,"metadata":{"longname":"i3:Create Maplist","label":"create_wps_maplist","url":"http://130.89.221.193:82/WorkflowApp/app/api/wps.py?","resource":"WPS","description":"Create a maplist from a set of raster data.","inputparametercount":1,"outputparametercount":1,"position":[394,278]},"inputs":[{"id":0,"identifier":"rasters","name":"list of raster maps","type":"string","description":"A raster with multiple bands.","optional":false,"url":"","value":"0_to_0"}],"outputs":[{"id":0,"identifier":"raster","name":"result","value":"","description":"result","type":"maplist"}]},{"id":2,"metadata":{"longname":"i3:Table from GeoJSON","label":"create_wps_table","url":"http://130.89.221.193:82/WorkflowApp/app/api/wps.py?","resource":"WPS","description":"Create an ILWIS Table from a GeoJSON.","inputparametercount":2,"outputparametercount":1,"position":[676,31]},"inputs":[{"id":0,"identifier":"feature","name":"GeoJSON feature","type":"geom","description":"The url of the GeoJSON which is to be imported to ilwis tbt file","optional":false,"url":"http://130.89.8.26/WorkflowApp/app/api/sos.py?service=SOS&request=GetObservation&version=1.0.0&observedProperty=Rainfall_citizenpoints&offering=rainfall_CITIZENPOINTS&eventTime=2015-07-01/2015-07-31","value":"http://130.89.8.26/WorkflowApp/app/api/sos.py?service=SOS&request=GetObservation&version=1.0.0&observedProperty=Rainfall_citizenpoints&offering=rainfall_CITIZENPOINTS&eventTime=2015-07-01/2015-07-31"},{"id":1,"identifier":"domain","name":"Table Domain","type":"string","description":"The domain class to use","optional":true,"url":"","value":"wpdx.dom"}],"outputs":[{"id":0,"identifier":"result","name":"ilwis table","value":"","description":"ilwis table","type":"table"}]},{"id":3,"metadata":{"longname":"i3:PointMap From Table","label":"pointmapfrom_wps_table","url":"http://130.89.221.193:82/WorkflowApp/app/api/wps.py?","resource":"WPS","description":"Create an ILWIS Point map from table.","inputparametercount":4,"outputparametercount":1,"position":[682,253]},"inputs":[{"id":0,"identifier":"table","name":"Input table","type":"table","description":"The url of the input ilwis tbt file","optional":false,"url":"","value":"2_to_0"},{"id":1,"identifier":"latitude_column","name":"Latitude column","type":"string","description":"Column corresponding to latitude","optional":false,"url":"","value":"lat"},{"id":2,"identifier":"longitude_column","name":"Longitude column","type":"string","description":"Column corresponding to longitude","optional":false,"url":"","value":"lon"},{"id":3,"identifier":"crs","name":"coordinate system","type":"string","description":"Spatial Reference System e.g. LatlonWGS84","optional":false,"url":"","value":"wgs84"}],"outputs":[{"id":0,"identifier":"result","name":"Point Map","value":"","description":"Point Map","type":"pointmap"}]},{"id":4,"metadata":{"longname":"i3:Create Maplist2","label":"create_wps_maplist2","url":"http://130.89.221.193:82/WorkflowApp/app/api/wps.py?","resource":"WPS","description":"Create a maplist from a set of available rainfall maps. The rainfall map providers are CHIRPS, TAMSAT.","inputparametercount":3,"outputparametercount":1,"position":[136,296]},"inputs":[{"id":0,"identifier":"startdate","name":"Start date","type":"date","description":"The start date","optional":false,"url":"","value":"2015-06-30T22:00:00.000Z"},{"id":1,"identifier":"enddate","name":"End date","type":"date","description":"The end date","optional":false,"url":"","value":"2015-07-30T22:00:00.000Z"},{"id":2,"identifier":"satelite","name":"Satelite product e.g. CHIRPS","type":"string","description":"The rainfall satellite product, CHIRPS, TAMSAT","optional":false,"url":"","value":"chirps"}],"outputs":[{"id":0,"identifier":"raster","name":"result","value":"","description":"result","type":"maplist"}]},{"id":5,"metadata":{"longname":"i3:Triple Collocation","label":"triple_wps_collocation","url":"http://130.89.221.193:82/WorkflowApp/app/api/wps.py?","resource":"WPS","description":"Triple Sensor Collocation can be used to validate 3 independent observations at a location, when the error free true value is not known.With this you can judge, which water or climate observation, i.e. your citizen observation, conventional station measurement or a remotely sensed satellite look-up and retrieval is most reliable.","inputparametercount":3,"outputparametercount":1,"position":[404,513]},"inputs":[{"id":0,"identifier":"satelite_data","name":"Satellite data","type":"maplist","description":"This is a map list of Earth observation data e.g. CHIRPS rainfall maps","optional":false,"url":"","value":"4_to_0"},{"id":1,"identifier":"station_data","name":"Station data","type":"maplist","description":"This is a point map of In-situ or metereological station data","optional":false,"url":"","value":"1_to_1"},{"id":2,"identifier":"citizen_data","name":"Citizen data","type":"pointmap","description":"Point map of citizen generated data","optional":false,"url":"","value":"3_to_2"}],"outputs":[{"id":0,"identifier":"result","name":"Evaluation report","value":"","description":"Evaluation report","type":"geom"}]}],"connections":[{"fromOperationID":0,"toOperationID":1,"fromParameterID":0,"toParameterID":0},{"fromOperationID":2,"toOperationID":3,"fromParameterID":0,"toParameterID":0},{"fromOperationID":4,"toOperationID":5,"fromParameterID":0,"toParameterID":0},{"fromOperationID":1,"toOperationID":5,"fromParameterID":0,"toParameterID":1},{"fromOperationID":3,"toOperationID":5,"fromParameterID":0,"toParameterID":2}]}]}
